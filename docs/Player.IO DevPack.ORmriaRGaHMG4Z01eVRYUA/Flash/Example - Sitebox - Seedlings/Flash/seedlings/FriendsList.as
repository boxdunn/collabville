package  seedlings{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import fl.transitions.Tween;	import fl.transitions.easing.*;	import flash.net.navigateToURL;	import flash.net.URLRequest;		public class FriendsList extends MovieClip{		private var cwidth:int = 95		private var tweens:Array = []		private var targetx:Number = 0		private var size:int = 0 		private var twidth:Number		private var parameters:Object				public function FriendsList(size:int, friends:Array, parameters:Object) {			//Declare how many friends should be shown in list			this.size = size			//SWF flashvars			this.parameters = parameters			//Sort friendslist on XP			friends.sortOn(["xp"], Array.NUMERIC)						//If to few of our friends play the game, add null entries to fill the bar			if(friends.length<size ){				while(friends.length<size ){					friends.unshift(null)				}			}else{				//If we have enough friends, add a single empty friends item to the list 				friends.unshift(null)			}						//If we don't overflow the list, hide arrowleft			if(friends.length <= size){				arrowleft.visible = false			}			arrowright.visible = false						//Calculate total width of our friends			twidth = friends.length * cwidth						//Create friendlist items			for( var a:int=0;a<friends.length;a++){				if(friends[a]){					//If entry is a real friend, insert friends item					var r:FriendsListItem = new FriendsListItem(friends[a].fbdata.first_name + " " + friends[a].fbdata.last_name, friends[a].xp, Levelbar.GetLevel(friends[a].xp) , friends[a].fbdata.pic_small);					container.addChild(r);					r.x = a*cwidth					attachClickHandler(r, friends[a])				}else{					//If entry is null, insert invite friends box					var iv:FrindsListInviteFriend = new FrindsListInviteFriend();					container.addChild(iv);					iv.x = a*cwidth					attachClickHandler(iv,null)				}			}						//Calculate position of friendlist items			targetx = container.x = -twidth + cwidth * size + 32						//Move arrowright to fit the size of the friendslist			arrowright.x = cwidth*size + 46			//Resize mask to fit the size of the friendslist			masker.width = cwidth*size+ 2									//Declare scoll handlers			arrowleft.addEventListener(MouseEvent.MOUSE_DOWN, panleft);			arrowright.addEventListener(MouseEvent.MOUSE_DOWN, panright);					}				//Declare click handler for friendlist item		private function attachClickHandler(target:MovieClip, object:*):void{			target.addEventListener(MouseEvent.CLICK, function():void{				if(object){					//If entry is friend, load friend					navigateToURL(new URLRequest(parameters.fb_app_root + "show?id=" + object.key), "_top")				}else{					//If entry is null, load invite friends					navigateToURL(new URLRequest(parameters.fb_app_root + "invite"), "_top")				}			})						//Give target the hand cursor			target.useHandCursor = true;			target.buttonMode = true		}				private function panleft(e:Event):void{			//If we can't pan further to the left, hide arrowleft			if(targetx < 0){				targetx += cwidth				if(targetx > 0){					arrowleft.visible = false				}			}			//We panned left, show arrowright			arrowright.visible = true			//Animate panning			tweens.push( new Tween(container, "x", Strong.easeOut, container.x, targetx, .5, true) )		}				private function panright(e:Event):void{			//If we can't pan further to the right, hide arrowright			targetx -= cwidth			var max:Number = -twidth + cwidth * size + 32;			if(targetx <= max){				targetx = max;				arrowright.visible = false			}			//We panned right, show arrowleft			arrowleft.visible = true						//Animate panning			tweens.push( new Tween(container, "x", Strong.easeOut, container.x, targetx, .5, true) )		}	}}