package states {	import flash.display.MovieClip;	import states.gamestate.*;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.display.BlendMode;	import flash.geom.Point;	import flash.filters.BlurFilter;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	public class GameState extends State {		private var bombs:Array = [];		private var bombsContainer:Sprite = new Sprite();		private var fragmentContainer:Sprite = new Sprite();				private var bmd:BitmapData = new BitmapData(640, 480, false, 0x0)		private var bmdmask:BitmapData = new BitmapData(640,480, true, 0x2200000);		private var gametop:GameTop		private var total:int = 0		private var collected:int = 0		private var goal:int = 0		private var clicked:Boolean = false		private var dings:Array = [new ding01,new ding02,new ding03,new ding04,new ding05,new ding06,new ding07,new ding08,new ding09,new ding10,new ding11,new ding12,new ding13,new ding14,new ding15]		private var magicDing:magic = new magic()				public function GameState(goal:int, total:int) {						this.total = total			this.goal = goal									var bm:Bitmap = new Bitmap( bmd, "auto", true )			addChild( bm )			addChild(fragmentContainer);			addChild(bombsContainer)			addChild( gametop = new GameTop(function(){				base.showMenu();			}))						for(var a:int=0;a<total;a++){				var bomb:Bomb = new Bomb();				bomb.x = Math.random()*640				bomb.y = Math.random()*440+40				bombs.push(bombsContainer.addChild(bomb))			}						addEventListener(Event.ENTER_FRAME, handleEnterFrame)			addEventListener(Event.ADDED_TO_STAGE, handleAttach)			addEventListener(Event.REMOVED_FROM_STAGE, handleDetatch)			refreshtText()		}				private function refreshtText():void{			gametop.text = collected + "/" + goal + " of " + total		}				private function handleAttach(e:Event){			stage.addEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown)		}				private function handleDetatch(e:Event){			stage.removeEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown)			removeEventListener(Event.ENTER_FRAME, handleEnterFrame)		}				private function handleMouseDown(e:MouseEvent):void{			if(clicked) return			clicked = true			explode(mouseX, mouseY)		}				private function handleEnterFrame(e:Event):void{			for( var a:int=0;a<bombs.length;a++){				var b:Bomb = bombs[a] as Bomb;				b.tick()				if( fragmentContainer.hitTestPoint( b.x, b.y, true ) ){					bombs.splice(a--,1)					bombsContainer.removeChild(b)					explode(b.x,b.y)					collected++															var s:SoundChannel = dings[Math.min(collected, dings.length-1)].play()					s.soundTransform = new SoundTransform(0.2);										if(collected == goal){						s = magicDing.play()						s.soundTransform = new SoundTransform(0.5);						bmd.fillRect(bmd.rect,0x444444)					}										refreshtText()				}			}			for( a = 0;a<fragmentContainer.numChildren;a++){				var f:Fragment = fragmentContainer.getChildAt(a) as Fragment				if(f.tick()){					fragmentContainer.removeChild(f)					a--				}			}						if(fragmentContainer.numChildren == 0 && clicked){				if( collected >= goal ){					base.nextLevel()				}else base.sameLevel();			}						bmd.draw(fragmentContainer, null, null, BlendMode.ADD)			bmd.applyFilter( bmd, bmd.rect, new Point(0,0), new BlurFilter(4,4))			bmd.draw(bmdmask)		}				private function explode(x:int, y:int):void{			var type:int = (Math.random()*6>>0 ) +1			for( var a:int=0;a<8;a++){				var fragment:Fragment = new Fragment((Math.PI*2/8)*a,type)				fragment.x = x;				fragment.y = y				fragmentContainer.addChild(fragment);			}		}	}}