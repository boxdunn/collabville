package {	import flash.display.MovieClip	import flash.text.TextField	import flash.events.Event	import flash.events.MouseEvent	import flash.filters.BevelFilter;	import flash.filters.DropShadowFilter;	import flash.text.TextFormat;	public class Letter extends MovieClip{		private var isInDrag:Boolean = false		private var offsetX:Number = 0;		private var offsetY:Number = 0;		private var bevel:BevelFilter;		public var Id:Number		function Letter(id:Number, char:String,color:Number){						this.Id = id			var format:TextFormat = new TextFormat();			format.color = color			letter.defaultTextFormat = format			letter.text = char;			letter.width = letter.textWidth+3			letter.height = letter.textHeight									bevel = new BevelFilter(2,45,0xFFFFFF,1,0x000000,1,1,1,0.16,3,"inner",false)						var dropShadow:DropShadowFilter = new DropShadowFilter(1,45,0x000000,1,2,2,0.5,1,false,false,false)			this.filters = [bevel, dropShadow]			this.addEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown)			this.addEventListener(Event.ADDED_TO_STAGE, handleAddedToStage)		}				public override function get width():Number{			return letter.width;		}		private function handleAddedToStage(e:Event){			stage.addEventListener(MouseEvent.MOUSE_UP, handleMouseUp,false,1000)			this.addEventListener(Event.ENTER_FRAME, handleMouseMove)			this.addEventListener(MouseEvent.MOUSE_MOVE, proxyMouseEvents)			this.addEventListener(MouseEvent.MOUSE_OUT, proxyMouseEvents)		}		private function handleMouseMove(e:Event){			if(isInDrag){				this.x = Math.min( Math.max( parent.mouseX-offsetX, 0), 650 - letter.textWidth-5)				this.y = Math.min( Math.max( parent.mouseY-offsetY, 0), 650 - letter.textHeight)			}		}				private function proxyMouseEvents(e:MouseEvent){			if(!e.buttonDown){				handleMouseUp(e);			}		}		private function handleMouseDown(e:MouseEvent){			isInDrag = true			offsetX = this.mouseX			offsetY = this.mouseY						var dropShadow:DropShadowFilter = new DropShadowFilter(3,45,0x000000,1,5,5,0.5,1,false,false,false)			this.filters = [bevel, dropShadow]						dispatchEvent( new Event(Event.SELECT, false, false));					}		private function handleMouseUp(e:MouseEvent){			if(isInDrag){				dispatchEvent(new Event(Event.CHANGE, false, false));				var dropShadow:DropShadowFilter = new DropShadowFilter(1,45,0x000000,1,2,2,0.5,1,false,false,false)				this.filters = [bevel, dropShadow]			}			isInDrag = false		}	}	}